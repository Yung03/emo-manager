#!/usr/bin/env python3
"""
Script para ejecutar tests del EMO Manager con diferentes configuraciones.
"""

import subprocess
import sys
import time
from pathlib import Path

def run_command(cmd, description):
    """Ejecuta un comando y reporta el resultado."""
    print(f"\nüîç {description}")
    print("=" * 60)
    
    start_time = time.time()
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=300)
        execution_time = time.time() - start_time
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - EXITOSO ({execution_time:.1f}s)")
            if result.stdout:
                print(result.stdout)
        else:
            print(f"‚ùå {description} - FALL√ì ({execution_time:.1f}s)")
            if result.stderr:
                print("ERRORES:")
                print(result.stderr)
            if result.stdout:
                print("SALIDA:")
                print(result.stdout)
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT (>5 minutos)")
        return False
    except Exception as e:
        print(f"üí• {description} - ERROR: {e}")
        return False

def check_dependencies():
    """Verifica que las dependencias est√©n instaladas."""
    print("üîç VERIFICANDO DEPENDENCIAS...")
    
    required_packages = ['pandas', 'pytest', 'psutil', 'openpyxl']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} - NO INSTALADO")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüö® INSTALAR DEPENDENCIAS FALTANTES:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def main():
    """Funci√≥n principal para ejecutar tests."""
    
    print("üß™ EMO MANAGER - SUITE DE TESTS")
    print("=" * 50)
    
    # Verificar dependencias
    if not check_dependencies():
        return 1
    
    # Verificar que existen los archivos necesarios
    required_files = ['emo_manager.py', 'test_emo_comprehensive.py']
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå ARCHIVOS FALTANTES: {missing_files}")
        return 1
    
    print(f"\nüìÅ Archivos encontrados:")
    for file in Path(".").glob("*.py"):
        print(f"  ‚Ä¢ {file.name}")
    
    # Ejecutar diferentes tipos de tests
    test_configs = [
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerBasic -v",
            "desc": "TESTS B√ÅSICOS"
        },
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerCriticalIssues -v",
            "desc": "TESTS DE ISSUES CR√çTICOS"
        },
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerAnalysis -v",
            "desc": "TESTS DE AN√ÅLISIS"
        },
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerQuality -v",
            "desc": "TESTS DE CALIDAD"
        },
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerExcelExport -v",
            "desc": "TESTS DE EXPORTACI√ìN EXCEL"
        },
        {
            "cmd": "python -m pytest test_emo_comprehensive.py::TestEMOManagerAdvancedFeatures -v",
            "desc": "TESTS DE FUNCIONES AVANZADAS"
        }
    ]
    
    # Ejecutar tests b√°sicos
    print(f"\nüöÄ EJECUTANDO TESTS PRINCIPALES...")
    
    passed_tests = 0
    failed_tests = 0
    
    for config in test_configs:
        success = run_command(config["cmd"], config["desc"])
        if success:
            passed_tests += 1
        else:
            failed_tests += 1
    
    # Tests de performance (opcionales)
    print(f"\n‚ö° TESTS DE PERFORMANCE (OPCIONALES)...")
    
    performance_cmd = "python -m pytest test_emo_comprehensive.py -m slow -v"
    performance_success = run_command(performance_cmd, "TESTS DE PERFORMANCE")
    
    # Test de funcionamiento b√°sico del manager
    print(f"\nüè• TEST DE FUNCIONAMIENTO B√ÅSICO...")
    basic_test_success = run_command("python emo_manager.py", "EJECUCI√ìN DIRECTA DEL MANAGER")
    
    # Resumen final
    print(f"\nüìä RESUMEN DE RESULTADOS")
    print("=" * 50)
    print(f"‚úÖ Tests exitosos: {passed_tests}")
    print(f"‚ùå Tests fallidos: {failed_tests}")
    print(f"‚ö° Performance test: {'‚úÖ EXITOSO' if performance_success else '‚ùå FALL√ì'}")
    print(f"üè• Test b√°sico manager: {'‚úÖ EXITOSO' if basic_test_success else '‚ùå FALL√ì'}")
    
    if failed_tests == 0 and basic_test_success:
        print(f"\nüéâ ¬°TODOS LOS TESTS PRINCIPALES PASARON!")
        print(f"‚úÖ EMO Manager est√° funcionando correctamente")
        return 0
    else:
        print(f"\nüö® ALGUNOS TESTS FALLARON")
        print(f"üí° Revisa los errores espec√≠ficos arriba")
        return 1

if __name__ == "__main__":
    exit_code = main()
    
    print(f"\nüîö TESTS COMPLETADOS")
    if exit_code == 0:
        print("üéØ ¬°TODO FUNCIONANDO CORRECTAMENTE!")
    else:
        print("üîß NECESITA CORRECCIONES")
    
    sys.exit(exit_code)